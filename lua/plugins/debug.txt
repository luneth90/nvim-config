return {
  { "mfussenegger/nvim-dap", dependencies = { "nvim-neotest/nvim-nio" }, config = function()
    local dap = require("dap")
    dap.adapters.codelldb = {
      type = "server",
      port = "${port}",
      executable = {
        command = "/Users/xiaowei/.local/share/nvim/mason/bin/codelldb",
        args = { "--port", "${port}" },
      },
    }
    dap.configurations.rust = {
      {
        name = "run",
        type = "codelldb",
        request = "launch",
        program = function() return vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/target/debug/", "file") end,
        args = function() return { vim.fn.input("args: "), "--exact", "--nocapture" } end,
        cwd = "${workspaceFolder}",
        stopOnEntry = false,
      },
    }
  end, keys = {
    { "<leader>dr", "<cmd>lua require('dap').continue()<CR>", desc = "DAP Continue" },
    { "<leader>dn", "<cmd>lua require('dap').step_over()<CR>", desc = "DAP Step Over" },
    { "<leader>di", "<cmd>lua require('dap').step_into()<CR>", desc = "DAP Step Into" },
    { "<leader>do", "<cmd>lua require('dap').step_out()<CR>", desc = "DAP Step Out" },
    { "<leader>db", "<cmd>lua require('dap').toggle_breakpoint()<CR>", desc = "Toggle Breakpoint" },
    { "<leader>dc", "<cmd>lua require('dap').clear_breakpoints()<CR>", desc = "Clear Breakpoints" },
    { "<leader>dt", "<cmd>lua require('dap').terminate()<CR>", desc = "Terminate DAP" },
  } },
  { "rcarriga/nvim-dap-ui", dependencies = { "mfussenegger/nvim-dap" }, config = function()
    local dap, dapui = require("dap"), require("dapui")
    dapui.setup()
    dap.listeners.after.event_initialized["dapui_config"] = function() dapui.open() end
    dap.listeners.before.event_terminated["dapui_config"] = function() dapui.close() end
    dap.listeners.before.event_exited["dapui_config"] = function() dapui.close() end
  end },
}
